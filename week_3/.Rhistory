str5 <- c("3","_","6","_","9")
graph <- data.frame(str1,str2,str3,str4,str5)
names(graph) <- c("1","2","3","4","5")
A <- "O"
B <- "X"
r <- 1
test <- c()
while(T){
print(graph)
if(r == 10){
cat("End in a draw!!!\n")
break
}else if(r%%2==0){
symbol <- B
cat("Round",r,"\n","Now is player B's term!\n")
input <- (readline("Player B input(1~9) :"))
}else if(r%%2!=0){
symbol <- A
cat("Round",r,"\n","Now is player A's term!\n")
input <- (readline("Player A input(1~9) :"))
}
if(input == "exit"){
}else{
input <- as.integer(input)
}
test[r] <- input
if(input == "exit"){
cat("Bye-Bye!!")
break
}else if(input %in% c(1:9) == F){
cat("Invalid input! Please re-enter!\n")
r <- r-1
}else if(input %in% test[1:r-1]){
cat("This position is already occupied!\n")
r <- r-1
}else if(input%%3==1){
str1[(input - (as.integer(input/3)))] <- symbol
}else if(input%%3==2){
str3[input - as.integer(input/3) - 1] <- symbol
}else if(input%%3==0){
str5[input - (as.integer(input/3)+1)] <- symbol
}
graph <- data.frame(str1,str2,str3,str4,str5)
names(graph) <- c("1","2","3","4","5")
checkwin(graph, symbol, check)
if(graph[1,1]==symbol && graph[1,3]==symbol && graph[1,5]==symbol){
checkAB(symbol)
break
}else if(graph[3,1]==symbol && graph[3,3]==symbol && graph[3,5]==symbol){
checkAB(symbol)
break
}else if(graph[5,1]==symbol && graph[5,3]==symbol && graph[5,5]==symbol){
checkAB(symbol)
break
}else if(graph[1,1]==symbol && graph[3,1]==symbol && graph[5,1]==symbol){
checkAB(symbol)
break
}else if(graph[1,3]==symbol && graph[3,3]==symbol && graph[5,3]==symbol){
checkAB(symbol)
break
}else if(graph[1,5]==symbol && graph[3,5]==symbol && graph[5,5]==symbol){
checkAB(symbol)
break
}else if(graph[1,1]==symbol && graph[3,3]==symbol && graph[5,5]==symbol){
checkAB(symbol)
break
}else if(graph[1,5]==symbol && graph[3,3]==symbol && graph[5,1]==symbol){
checkAB(symbol)
break
}
r <- r+1
}
checkAB <- function(symbol){
if(symbol==A){
print("A win")
print(graph)
}else{
print("B win")
print(graph)
}
}
#圖形
str1 <- c("1","_","4","_","7")
str2 <- c("|","_","|","_","|")
str3 <- c("2","_","5","_","8")
str4 <- c("|","_","|","_","|")
str5 <- c("3","_","6","_","9")
graph <- data.frame(str1,str2,str3,str4,str5)
names(graph) <- c("1","2","3","4","5")
A <- "O"
B <- "X"
r <- 1
test <- c()
while(T){
print(graph)
#
if(r == 10){
cat("End in a draw!!!\n")
break
}else if(r%%2==0){
symbol <- B
cat("Round",r,"\n","Now is player B's term!\n")
input <- (readline("Player B input(1~9) :"))
}else if(r%%2!=0){
symbol <- A
cat("Round",r,"\n","Now is player A's term!\n")
input <- (readline("Player A input(1~9) :"))
}
if(input == "exit"){
}else{
input <- as.integer(input)
}
test[r] <- input
if(input == "exit"){
cat("Bye-Bye!!")
break
}else if(input %in% c(1:9) == F){
cat("Invalid input! Please re-enter!\n")
r <- r-1
}else if(input %in% test[1:r-1]){
cat("This position is already occupied!\n")
r <- r-1
}else if(input%%3==1){
str1[(input - (as.integer(input/3)))] <- symbol
}else if(input%%3==2){
str3[input - as.integer(input/3) - 1] <- symbol
}else if(input%%3==0){
str5[input - (as.integer(input/3)+1)] <- symbol
}
graph <- data.frame(str1,str2,str3,str4,str5)
names(graph) <- c("1","2","3","4","5")
checkwin(graph, symbol, check)
if(graph[1,1]==symbol && graph[1,3]==symbol && graph[1,5]==symbol){
checkAB(symbol)
break
}else if(graph[3,1]==symbol && graph[3,3]==symbol && graph[3,5]==symbol){
checkAB(symbol)
break
}else if(graph[5,1]==symbol && graph[5,3]==symbol && graph[5,5]==symbol){
checkAB(symbol)
break
}else if(graph[1,1]==symbol && graph[3,1]==symbol && graph[5,1]==symbol){
checkAB(symbol)
break
}else if(graph[1,3]==symbol && graph[3,3]==symbol && graph[5,3]==symbol){
checkAB(symbol)
break
}else if(graph[1,5]==symbol && graph[3,5]==symbol && graph[5,5]==symbol){
checkAB(symbol)
break
}else if(graph[1,1]==symbol && graph[3,3]==symbol && graph[5,5]==symbol){
checkAB(symbol)
break
}else if(graph[1,5]==symbol && graph[3,3]==symbol && graph[5,1]==symbol){
checkAB(symbol)
break
}
r <- r+1
}
checkAB <- function(symbol){
if(symbol==A){
print("A win")
print(graph)
}else{
print("B win")
print(graph)
}
}
#圖形
str1 <- c("1","_","4","_","7")
str2 <- c("|","_","|","_","|")
str3 <- c("2","_","5","_","8")
str4 <- c("|","_","|","_","|")
str5 <- c("3","_","6","_","9")
graph <- data.frame(str1,str2,str3,str4,str5)
names(graph) <- c("1","2","3","4","5")
A <- "O"
B <- "X"
r <- 1
test <- c()
while(T){
print(graph)
#回數判斷
if(r == 10){
cat("End in a draw!!!\n")
break
}else if(r%%2==0){
symbol <- B
cat("Round",r,"\n","Now is player B's term!\n")
input <- (readline("Player B input(1~9) :"))
}else if(r%%2!=0){
symbol <- A
cat("Round",r,"\n","Now is player A's term!\n")
input <- (readline("Player A input(1~9) :"))
}
#輸入為文字或數字
if(input == "exit"){
}else{
input <- as.integer(input)
}
#將輸入存入一向量方便觀察是否重複
test[r] <- input
#輸入判斷後輸出回應
if(input == "exit"){
cat("Bye-Bye!!")
break
}else if(input %in% c(1:9) == F){
cat("Invalid input! Please re-enter!\n")
r <- r-1
}else if(input %in% test[1:r-1]){
cat("This position is already occupied!\n")
r <- r-1
}else if(input%%3==1){
str1[(input - (as.integer(input/3)))] <- symbol
}else if(input%%3==2){
str3[input - as.integer(input/3) - 1] <- symbol
}else if(input%%3==0){
str5[input - (as.integer(input/3)+1)] <- symbol
}
graph <- data.frame(str1,str2,str3,str4,str5)
names(graph) <- c("1","2","3","4","5")
#勝利條件判斷
if(graph[1,1]==symbol && graph[1,3]==symbol && graph[1,5]==symbol){
checkAB(symbol)
break
}else if(graph[3,1]==symbol && graph[3,3]==symbol && graph[3,5]==symbol){
checkAB(symbol)
break
}else if(graph[5,1]==symbol && graph[5,3]==symbol && graph[5,5]==symbol){
checkAB(symbol)
break
}else if(graph[1,1]==symbol && graph[3,1]==symbol && graph[5,1]==symbol){
checkAB(symbol)
break
}else if(graph[1,3]==symbol && graph[3,3]==symbol && graph[5,3]==symbol){
checkAB(symbol)
break
}else if(graph[1,5]==symbol && graph[3,5]==symbol && graph[5,5]==symbol){
checkAB(symbol)
break
}else if(graph[1,1]==symbol && graph[3,3]==symbol && graph[5,5]==symbol){
checkAB(symbol)
break
}else if(graph[1,5]==symbol && graph[3,3]==symbol && graph[5,1]==symbol){
checkAB(symbol)
break
}
r <- r+1
}
triples <- list(c(1,2,3),c(4,5,6),c(7,8,9),c(1,4,7),c(2,5,8),c(3,6,9),c(1,5,9),c(3,5,7))
winner <- F
state <- as.character(1:9)
display <- function(state){
cat(" ",state[1],"|",state[2],"|",state[3],"\n")
cat("______","\n")
cat(" ",state[4],"|",state[5],"|",state[6],"\n")
cat("______","\n")
cat(" ",state[7],"|",state[8],"|",state[9],"\n")
}
update <- function(state, who, pos){
if(who==1){state[pos]<- "x"}
else if(who==2){state[pos]<-"o"}
return(state)
}
check_winner <- function(state){
for(i in 1:length(triples)){
if(sum(triples[[i]] %in% which(state=="x"))>=3){cat("x win")}
}
for(i in 1:length(triples)){
if(sum(triples[[i]] %in% which(state=="o"))>=3){cat("o win")}
}
}
library(ggplot2)
install.packages("tidyverse")
?function()
library(ggplot2)
getwd()
setwd("c:/datascience_course/NTU_R_Course_2018/week_3")
getwd()
mydata <- read_tgz("cartoonset10k.tgz")
help("cartoonset10k.tgz")
help(cartoonset10k.tgz)
help(??cartoonset10k.tgz)
library(ggplot2)
mydata <- read.table("youtube_speakers_2013.txt")
library(ggplot2)
mydata <- read.table("youtube_speakers_2013.txt")
mydata
library(ggplot2)
diamonds
library(ggplot2)
my.plot <- ggplot(diamonds, aes(carat, price, colour = cut))
my.plot
my.plot
library(ggplot2)
my.plot <- ggplot(diamonds, aes(carat, price, colour = cut))+layer(
geom = "point",
stat = "identity",
position = "identity",
params = list(na.rm = FALSE)
)
my.plot
diamonds
library(ggplot2)
ggplot(data = diamonds, aes(x = cut)) +
geom_bar(fill = "lightblue", colour = "black")
my.plot
library(ggplot2)
my.plot <- ggplot(data = diamonds, aes(x = cut)) + geom_bar(fill = "lightblue", colour = "black")
my.plot
library(ggplot2)
my.plot <- ggplot(data = diamonds, aes(x = price)) + geom_histogram()
my.plot
library(ggplot2)
my.plot <- ggplot(data = diamonds, aes(x = table, y=depth)) + geom_point()
my.plot
library(ggplot2)
my.plot <- ggplot(diamonds, aes(x=clarity, y=depth)) + geom_boxplot()
my.plot
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# 從數據集獲取10000個樣本數據進行分析
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
install.packages("GGally")
install.packages("memisc")
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# 從數據集獲取10000個樣本數據進行分析
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# 從數據集獲取10000個樣本數據進行分析
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
my.graph <- ggpairs(diamond_samp,lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
mygraph
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# 從數據集獲取10000個樣本數據進行分析
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
my.graph <- ggpairs(diamond_samp,lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
my.graph
---
title: "Diamonds Plot"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r cars}
summary(cars)
```
```{r pressure, echo=FALSE}
library(ggplot2)
#單變數：類別型
myplot <- ggplot(data = diamonds, aes(x = cut)) + geom_bar(fill = "lightblue", colour = "black")
myplot
#單變數：連續型
myplot2 <- ggplot(data = diamonds, aes(x = price)) + geom_histogram()
myplot2
#雙變數：連續 vs 連續
myplot3 <- ggplot(data = diamonds, aes(x = table, y=depth)) + geom_point()
myplot3
#雙變數：離散 vs 連續
myplot4 <- ggplot(diamonds, aes(x=clarity, y=depth)) + geom_boxplot()
myplot4
```
---
title: "Diamonds Plot"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#單變數：類別型
myplot <- ggplot(data = diamonds, aes(x = cut)) + geom_bar(fill = "lightblue", colour = "black")
myplot
#單變數：連續型
myplot2 <- ggplot(data = diamonds, aes(x = price)) + geom_histogram()
myplot2
#雙變數：連續 vs 連續
myplot3 <- ggplot(data = diamonds, aes(x = table, y=depth)) + geom_point()
myplot3
#雙變數：離散 vs 連續
myplot4 <- ggplot(diamonds, aes(x=clarity, y=depth)) + geom_boxplot()
myplot4
```
```{r cars}
summary(cars)
```
---
title: "Diamonds Plot"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#單變數：類別型
myplot <- ggplot(data = diamonds, aes(x = cut)) + geom_bar(fill = "lightblue", colour = "black")
myplot
#單變數：連續型
myplot2 <- ggplot(data = diamonds, aes(x = price)) + geom_histogram()
myplot2
#雙變數：連續 vs 連續
myplot3 <- ggplot(data = diamonds, aes(x = table, y=depth)) + geom_point()
myplot3
#雙變數：離散 vs 連續
myplot4 <- ggplot(diamonds, aes(x=clarity, y=depth)) + geom_boxplot()
myplot4
```
library(ggplot2)
mydata <- read.xls("國民儲蓄與投資毛額.xls")
mydata
mydata <- read.xls("國民儲蓄與投資毛額.xls")
install.packages("gdata")
library(ggplot2)
library(gdata)
mydata <- read.xls("國民儲蓄與投資毛額.xls")
library(ggplot2)
library(gdata)
mydata <- read.xls("1.xls")
mydata
library(ggplot2)
library(gdata)
mydata <- read.xls("1.xls")
mydata
mydata <- read.xls("1.xls")
mydata = read.xls("1.xls")
mydata <-  read.csv("1.csv")
library(ggplot2)
library(gdata)
mydata <-  read.csv("1.csv")
mydata
library(ggplot2)
library(gdata)
mydata <-  read.csv("1.csv")
mydata <- data.frame("mydata")
mydata
library(ggplot2)
library(gdata)
mydata <-  read.csv("1.csv")
mydata <- data.frame(mydata)
mydata
help(read.xls)
mydata <- read.xls("np02.xls")
library(ggplot2)
library(gdata)
help(read.xls)
mydata = read.xls("np02.xls")
library(ggplot2)
library(gdata)
help(read.xls)
mydata = read.xls("np02.xls",perl = perl)
library(ggplot2)
library(gdata)
help(read.xls)
mydata = read.xls("np02.xls",perl= argument)
library(ggplot2)
iris
library(ggplot2)
iris
myplot <- ggplot(iris, aes(x=Sepal.Length))+geom_bar(fill = "lightblue", colour = "black")
myplot
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
plot(myplot)
iris
library(ggplot2)
myplot <- ggplot(iris, aes(x=species))+geom_bar(fill = "lightblue", colour = "black")
myplot
library(ggplot2)
myplot <- ggplot(iris, aes(x=Species))+geom_bar(fill = "lightblue", colour = "black")
myplot
# 單變數：連續型
```{r }
myplot1 <- ggplot(iris, aes(x=Sepal.Width)) + geom_histogram( binwidth = 0.1)
plot(myplot1)
```
knitr::opts_chunk$set(echo = TRUE)
myplot1 <- ggplot(iris, aes(x=Sepal.Width)) + geom_histogram( binwidth = 0.1)
plot(myplot1)
myplot <- ggplot(iris, aes(x=Sepal.Length))+geom_bar(fill = "lightblue", colour = "black")
plot(myplot)
myplot1 <- ggplot(iris, aes(x=Sepal.Length)) + geom_histogram(binwidth = 0.1)
plot(myplot1)
myplot1 <- ggplot(iris, aes(x=Sepal.Length)) + geom_histogram(binwidth = 0.2)
plot(myplot1)
myplot1 <- ggplot(iris, aes(x=Sepal.Length)) + geom_histogram(binwidth = 0.05)
plot(myplot1)
myplot <- ggplot(iris, aes(x=Species,y=Petal.Width))+geom_bar(fill = "lightblue", colour = "black")
plot(myplot)
myplot <- ggplot(iris, aes(x=Species)+geom_bar(fill = "lightblue", colour = "black")
plot(myplot)
myplot <- ggplot(iris, aes(x=Species))+geom_bar(fill = "lightblue", colour = "black")
plot(myplot)
